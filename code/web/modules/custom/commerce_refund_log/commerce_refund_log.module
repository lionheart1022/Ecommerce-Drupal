<?php

/**
 * @file
 * Commerce refund log module.
 */

use Drupal\commerce_payment\Entity\PaymentInterface;
use Drupal\commerce_price\Price;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function commerce_refund_log_commerce_payment_insert(EntityInterface $entity) {
  /** @var \Drupal\commerce_payment\Entity\PaymentInterface $entity */
  commerce_refund_log($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function commerce_refund_log_commerce_payment_update(EntityInterface $entity) {
  /** @var \Drupal\commerce_payment\Entity\PaymentInterface $entity */
  commerce_refund_log($entity);
}

/**
 * Logs a refund.
 *
 * @param \Drupal\commerce_payment\Entity\PaymentInterface $payment
 *   The payment entity.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function commerce_refund_log(PaymentInterface $payment) {
  if (empty($payment->original)) {
    // Entity is inserted.
    $original_refunded_amount = new Price('0', $payment->getAmount()->getCurrencyCode());
  }
  else {
    /** @var \Drupal\commerce_payment\Entity\PaymentInterface $original_payment */
    $original_payment = $payment->original;
    $original_refunded_amount = $original_payment->getRefundedAmount();
  }

  $refunded_amount = $payment->getRefundedAmount();

  if (!$refunded_amount->equals($original_refunded_amount)) {
    $operation_refund_amount = $refunded_amount->subtract($original_refunded_amount);
    /** @var \Drupal\commerce_refund_log\Entity\RefundLogEntryInterface $refund_log_entry */
    $refund_log_entry = \Drupal::entityTypeManager()->getStorage('commerce_refund_log_entry')->create([
      'payment_id' => $payment->id(),
      'amount' => $operation_refund_amount,
      'refund_time' => \Drupal::time()->getRequestTime(),
    ]);
    $refund_log_entry->save();
  }
}

/**
 * Implements hook_entity_operation().
 */
function commerce_refund_log_entity_operation(EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'commerce_payment') {
    /** @var \Drupal\commerce_payment\Entity\PaymentInterface $payment */
    $payment = $entity;
    if (\Drupal::currentUser()->hasPermission('administer commerce_refund_log_entry')) {
      $operations = [];
      $operations['refunds'] = [
        'title' => t('Refunds'),
        'url' => Url::fromRoute('entity.commerce_refund_log_entry.collection', [
          'commerce_order' => $payment->getOrderId(),
          'commerce_payment' => $entity->id(),
        ]),
        'weight' => 50,
      ];
      return $operations;
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function commerce_refund_log_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'commerce_refund_log_entry' && isset($operations['clone'])) {
    // TODO Disallow cloning commerce_refund_log_entry in a more appropriate way
    // for all users.
    unset($operations['clone']);
  }
}
