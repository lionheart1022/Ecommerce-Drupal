<?php

/**
 * @file
 * Diamond Commerce - Shop module.
 */

use Drupal\commerce_product\Entity\ProductInterface;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_post_build().
 */
function dcom_shop_views_post_build(ViewExecutable $view) {
  if ($view->id() == 'diamond_commerce_shop') {
    // Hide Shop exposed form.
    $view->exposed_widgets = [];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dcom_shop_preprocess_field(&$variables) {
  if ($variables['field_type'] == 'commerce_price') {
    $variables['#cache']['contexts'][] = 'user.roles';
  }

  if ($variables['element']['#field_name'] == 'field_product_image') {
    if (in_array($variables['element']['#view_mode'], [
      'product_row_style_1',
      'product_megamenu_style_1',
    ])) {
      if (!empty($variables['items'])) {
        foreach ($variables['items'] as &$item) {
          /** @var \Drupal\commerce_product\Entity\Product $product */
          $product = $variables['element']['#object'];
          if ($product) {
            $item['content']['#product_title'] = $product->getTitle();
            CacheableMetadata::createFromRenderArray($variables)
              ->addCacheableDependency($product)
              ->applyTo($variables);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function dcom_shop_page_attachments_alter(array &$attachments) {
  // Replace Collection page metatags by ones fetched from the term if the only
  // one term is selected.
  $term = \Drupal::service('cpl_commerce_shop.collections_url_helper')
    ->getCollectionTermFromUrl(TRUE);

  if ($term && ($term_metatags = metatag_get_tags_from_route($term))) {
    if (isset($term_metatags['#attached']['html_head'])) {
      foreach ($term_metatags['#attached']['html_head'] as $term_attachment) {
        if (isset($term_attachment[0]['#tag']) && $term_attachment[0]['#tag'] == 'meta') {
          $attachments['#attached']['html_head'][] = $term_attachment;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dcom_shop_preprocess_taxonomy_term(&$variables) {
  if ($variables['view_mode'] == 'collection_term') {
    // Do not display taxonomy term name as a title.
    $variables['page'] = TRUE;
  }
}

/**
 * Implements hook_theme().
 */
function dcom_shop_theme() {
  return [
    'image_formatter' => [
      'variables' => ['product_title' => NULL],
    ],
  ];
}

/**
 * Implements hook_views_pre_execute().
 */
function dcom_shop_views_pre_execute(ViewExecutable $view) {
  if ($view->id() == 'diamond_commerce_shop'
    && $view->current_display == 'search_suggestions_json') {
    $view->get_total_rows = TRUE;
  }
}

/**
 * Add 'See All Results' link to search suggestions.
 *
 * Implements hook_views_post_render().
 */
function dcom_shop_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->id() == 'diamond_commerce_shop'
    && $view->current_display == 'search_suggestions_json'
    && isset($view->total_rows)
    && $view->total_rows > 0) {
    $exposed_input = $view->getExposedInput();
    if (empty($exposed_input['search'])) {
      return;
    }
    $rows = Json::decode((string) $output["#markup"]);
    $link = Link::createFromRoute(
      t('See All Results'),
      'page_manager.page_view_diamond_commerce_shop_page_diamond_commerce_shop_page-panels_variant-0',
      ['facets_query' => 'all'],
      ['query' => ['search' => $exposed_input['search']]]
    );
    $rows[] = $link->toString();
    $output['#markup'] = Json::encode($rows);
  }
}

/**
 * Implements hook_token_info_alter().
 */
function dcom_shop_token_info_alter(&$data) {
  if (isset($data['tokens']['commerce_product'])) {
    $product = &$data['tokens']['commerce_product'];

    $product['dcom-meta-title'] = [
      'name' => t('Diamond Commerce - Metadata title'),
      'description' => t('Product title for metadata.'),
    ];

    $product['dcom-meta-description'] = [
      'name' => t('Diamond Commerce - Metadata description'),
      'description' => t('Product description for metadata.'),
    ];
  }
}

/**
 * Implements hook_tokens().
 */
function dcom_shop_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  if ($type == 'commerce_product' && !empty($data['commerce_product'])) {
    /** @var \Drupal\commerce_product\Entity\ProductInterface $product */
    $product = $data['commerce_product'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'dcom-meta-title':
          $replacements[$original] = !empty($product->field_meta_title->value) ?
            $product->field_meta_title->value :
            $product->getTitle();
          $bubbleable_metadata->addCacheableDependency($product);
          break;

        case 'dcom-meta-description':
          $replacements[$original] = !empty($product->field_meta_description->value) ?
            $product->field_meta_description->value :
            strip_tags($product->body->value);
          $bubbleable_metadata->addCacheableDependency($product);
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_cron().
 */
function dcom_shop_cron() {
  $current_time = \Drupal::time()->getRequestTime();
  $last_index = dcom_shop_get_sales_last_index();
  $time_since_last_reindex = $current_time - $last_index;

  // Index between midnight and 1AM but only if last indexation was ran at least
  // 2 hours ago.
  $date = DrupalDateTime::createFromTimestamp($current_time);
  $hour = $date->format('G');

  if ($time_since_last_reindex >= 7200
    && $hour >= 0
    && $hour <= 1) {
    /** @var \Drupal\search_api\IndexInterface $index */
    $index = \Drupal::entityTypeManager()
      ->getStorage('search_api_index')
      ->load('products_index');
    if ($index) {
      $index->reindex();
      \Drupal::state()->set('dcom_shop_sales_last_index', $current_time);
    }
  }
}

/**
 * Get last Recent Sales reindex time.
 */
function dcom_shop_get_sales_last_index() {
  $timestamp = \Drupal::state()->get('dcom_shop_sales_last_index');

  if ($timestamp === NULL) {
    $timestamp = \Drupal::time()->getRequestTime();
    \Drupal::state()->set('dcom_shop_sales_last_index', $timestamp);
  }

  return $timestamp;
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function dcom_shop_commerce_product_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if (!($entity instanceof ProductInterface)) {
    // Not a product. Don't even have idea how one could get there.
    return AccessResult::neutral();
  }

  if (!($entity->hasField('field_domain'))) {
    // No domain field.
    return AccessResult::neutral();
  }

  /** @var \Drupal\domain\DomainNegotiatorInterface $domain_negotiator */
  $domain_negotiator = \Drupal::service('domain.negotiator');
  $active_domain = $domain_negotiator->getActiveId();

  $cache_metadata = (new CacheableMetadata())
    ->addCacheableDependency($domain_negotiator->getActiveDomain());

  foreach ($entity->field_domain as $item) {
    if (!empty($item->target_id) && $item->target_id == $active_domain) {
      return AccessResult::neutral()
        ->addCacheableDependency($cache_metadata);
    }
  }

  return AccessResult::forbiddenIf(!$account->hasPermission('administer commerce_product'))
    ->cachePerPermissions()
    ->addCacheableDependency($cache_metadata);
}

/**
 * Implements hook_entity_view_alter().
 */
function dcom_shop_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Populating image field from domain-specific field collection.
  if (!empty($build['field_image']) && $entity->hasField('field_domain_fields')) {
    $domain_negotiator = \Drupal::service('domain.negotiator');
    foreach ($entity->field_domain_fields->referencedEntities() as $fc) {
      if ($fc->hasField('field_domain') &&
        $fc->hasField('field_image') &&
        $domain_negotiator->getActiveId() == $fc->get('field_domain')->getString() &&
        $image = $fc->get('field_image')->getValue()
      ) {
        $build['field_image'][0]['#item']->setValue($image[0]);
      }
    }
  }
}
